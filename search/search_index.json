{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open &amp; Reproducible workflows in Earth Observation","text":"<p>Many cloud-based solutions for workflows in EO are available to users today, but only few support reproducibility or comply with the OGC FAIR (findability, accessibility, interoperability, reusability) data principles.</p> <p>This short tutorial demonstrates a solution that meets these requirements by executing an EO Application Package in a sample scenario. </p> <p>This documentation is a work in progress.</p>"},{"location":"scenario/background/","title":"Backround","text":""},{"location":"scenario/background/#personas","title":"Personas","text":"<p>The scenario described below is implemented using two distinct user personas:</p> <ul> <li>Alice developed a Water Body detection Earth Observation application and package it as an EO Application Package</li> <li>Bob scripts the execution of application</li> </ul>"},{"location":"scenario/background/#scenario","title":"Scenario","text":"<p>Alice included in the Water Body detection Application Package software repository a Continuous Integration configuration relying on Github Actions to:</p> <ul> <li>build the containers</li> <li>push the built containers to Github container registry</li> <li>update the Application Package with these new container references</li> <li>push the updated Application Package to Github's artifact registry</li> </ul> <p>Alice sent an email to Bob:</p> <p>from: alice@acme.io to: bob@acme.io</p> <p>subject: Detecting water bodies with NDWI and the Otsu threshold</p> <p>Hi Bob!</p> <p>check out my new Application Package for detecting water bodies using NDWI and the Ostu threshold.</p> <p>I've ran it over our test site bounding box and preliminary result look promising.</p> <p>The github repo is https://github.com/eoap/quickwin and I've just released version 1.0.0.</p> <p>Let me know!</p> <p>Cheers</p> <p>Alice</p> <p>With this information, Bob scripts the Application Execution in a Jupyter Notebook.</p>"},{"location":"scenario/execution/","title":"Execution","text":"<p>Bob's environment has a container runtime (e.g. <code>podman</code> or <code>docker</code>) and the <code>cwltool</code> CWL runner.</p>"},{"location":"scenario/execution/#setting-up-the-environment-on-the-apphub-coder-application","title":"Setting-up the environment on the AppHub Coder application","text":"<p>Firstly, clone this repo:</p> <pre><code>git clone https://github.com/eoap/open-reproducible-app-package\n</code></pre> <p>Click on <code>File</code> then <code>Open Folder...</code> and browser to the cloned directory <code>open-reproducible-app-package</code></p> <p>Go back to the terminal and create the Python environment with:</p> <pre><code>python -m venv env_reproducible_app\nsource env_reproducible_app/bin/activate\npip install -r requirements.txt\npython -m ipykernel install --user --name env_reproducible_app --display-name \"env_reproducible_app\"\n</code></pre>"},{"location":"scenario/execution/#execution_1","title":"Execution","text":"<p>The execution is operated with the Jupyter Notebook <code>notebook.ipynb</code>. </p>"}]}